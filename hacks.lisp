(in-package :uncursed-sys)

;;; palette approximation

(defparameter *xterm-256*
  '((00  . #x000000)
    (01  . #x800000)
    (02  . #x008000)
    (03  . #x808000)
    (04  . #x000080)
    (05  . #x800080)
    (06  . #x008080)
    (07  . #xc0c0c0)
    (08  . #x808080)
    (09  . #xff0000)
    (10  . #x00ff00)
    (11  . #xffff00)
    (12  . #x0000ff)
    (13  . #xff00ff)
    (14  . #x00ffff)
    (15  . #xffffff)
    (16  . #x000000)
    (17  . #x00005f)
    (18  . #x000087)
    (19  . #x0000af)
    (20  . #x0000d7)
    (21  . #x0000ff)
    (22  . #x005f00)
    (23  . #x005f5f)
    (24  . #x005f87)
    (25  . #x005faf)
    (26  . #x005fd7)
    (27  . #x005fff)
    (28  . #x008700)
    (29  . #x00875f)
    (30  . #x008787)
    (31  . #x0087af)
    (32  . #x0087d7)
    (33  . #x0087ff)
    (34  . #x00af00)
    (35  . #x00af5f)
    (36  . #x00af87)
    (37  . #x00afaf)
    (38  . #x00afd7)
    (39  . #x00afff)
    (40  . #x00d700)
    (41  . #x00d75f)
    (42  . #x00d787)
    (43  . #x00d7af)
    (44  . #x00d7d7)
    (45  . #x00d7ff)
    (46  . #x00ff00)
    (47  . #x00ff5f)
    (48  . #x00ff87)
    (49  . #x00ffaf)
    (50  . #x00ffd7)
    (51  . #x00ffff)
    (52  . #x5f0000)
    (53  . #x5f005f)
    (54  . #x5f0087)
    (55  . #x5f00af)
    (56  . #x5f00d7)
    (57  . #x5f00ff)
    (58  . #x5f5f00)
    (59  . #x5f5f5f)
    (60  . #x5f5f87)
    (61  . #x5f5faf)
    (62  . #x5f5fd7)
    (63  . #x5f5fff)
    (64  . #x5f8700)
    (65  . #x5f875f)
    (66  . #x5f8787)
    (67  . #x5f87af)
    (68  . #x5f87d7)
    (69  . #x5f87ff)
    (70  . #x5faf00)
    (71  . #x5faf5f)
    (72  . #x5faf87)
    (73  . #x5fafaf)
    (74  . #x5fafd7)
    (75  . #x5fafff)
    (76  . #x5fd700)
    (77  . #x5fd75f)
    (78  . #x5fd787)
    (79  . #x5fd7af)
    (80  . #x5fd7d7)
    (81  . #x5fd7ff)
    (82  . #x5fff00)
    (83  . #x5fff5f)
    (84  . #x5fff87)
    (85  . #x5fffaf)
    (86  . #x5fffd7)
    (87  . #x5fffff)
    (88  . #x870000)
    (89  . #x87005f)
    (90  . #x870087)
    (91  . #x8700af)
    (92  . #x8700d7)
    (93  . #x8700ff)
    (94  . #x875f00)
    (95  . #x875f5f)
    (96  . #x875f87)
    (97  . #x875faf)
    (98  . #x875fd7)
    (99  . #x875fff)
    (100 . #x878700)
    (101 . #x87875f)
    (102 . #x878787)
    (103 . #x8787af)
    (104 . #x8787d7)
    (105 . #x8787ff)
    (106 . #x87af00)
    (107 . #x87af5f)
    (108 . #x87af87)
    (109 . #x87afaf)
    (110 . #x87afd7)
    (111 . #x87afff)
    (112 . #x87d700)
    (113 . #x87d75f)
    (114 . #x87d787)
    (115 . #x87d7af)
    (116 . #x87d7d7)
    (117 . #x87d7ff)
    (118 . #x87ff00)
    (119 . #x87ff5f)
    (120 . #x87ff87)
    (121 . #x87ffaf)
    (122 . #x87ffd7)
    (123 . #x87ffff)
    (124 . #xaf0000)
    (125 . #xaf005f)
    (126 . #xaf0087)
    (127 . #xaf00af)
    (128 . #xaf00d7)
    (129 . #xaf00ff)
    (130 . #xaf5f00)
    (131 . #xaf5f5f)
    (132 . #xaf5f87)
    (133 . #xaf5faf)
    (134 . #xaf5fd7)
    (135 . #xaf5fff)
    (136 . #xaf8700)
    (137 . #xaf875f)
    (138 . #xaf8787)
    (139 . #xaf87af)
    (140 . #xaf87d7)
    (141 . #xaf87ff)
    (142 . #xafaf00)
    (143 . #xafaf5f)
    (144 . #xafaf87)
    (145 . #xafafaf)
    (146 . #xafafd7)
    (147 . #xafafff)
    (148 . #xafd700)
    (149 . #xafd75f)
    (150 . #xafd787)
    (151 . #xafd7af)
    (152 . #xafd7d7)
    (153 . #xafd7ff)
    (154 . #xafff00)
    (155 . #xafff5f)
    (156 . #xafff87)
    (157 . #xafffaf)
    (158 . #xafffd7)
    (159 . #xafffff)
    (160 . #xd70000)
    (161 . #xd7005f)
    (162 . #xd70087)
    (163 . #xd700af)
    (164 . #xd700d7)
    (165 . #xd700ff)
    (166 . #xd75f00)
    (167 . #xd75f5f)
    (168 . #xd75f87)
    (169 . #xd75faf)
    (170 . #xd75fd7)
    (171 . #xd75fff)
    (172 . #xd78700)
    (173 . #xd7875f)
    (174 . #xd78787)
    (175 . #xd787af)
    (176 . #xd787d7)
    (177 . #xd787ff)
    (178 . #xd7af00)
    (179 . #xd7af5f)
    (180 . #xd7af87)
    (181 . #xd7afaf)
    (182 . #xd7afd7)
    (183 . #xd7afff)
    (184 . #xd7d700)
    (185 . #xd7d75f)
    (186 . #xd7d787)
    (187 . #xd7d7af)
    (188 . #xd7d7d7)
    (189 . #xd7d7ff)
    (190 . #xd7ff00)
    (191 . #xd7ff5f)
    (192 . #xd7ff87)
    (193 . #xd7ffaf)
    (194 . #xd7ffd7)
    (195 . #xd7ffff)
    (196 . #xff0000)
    (197 . #xff005f)
    (198 . #xff0087)
    (199 . #xff00af)
    (200 . #xff00d7)
    (201 . #xff00ff)
    (202 . #xff5f00)
    (203 . #xff5f5f)
    (204 . #xff5f87)
    (205 . #xff5faf)
    (206 . #xff5fd7)
    (207 . #xff5fff)
    (208 . #xff8700)
    (209 . #xff875f)
    (210 . #xff8787)
    (211 . #xff87af)
    (212 . #xff87d7)
    (213 . #xff87ff)
    (214 . #xffaf00)
    (215 . #xffaf5f)
    (216 . #xffaf87)
    (217 . #xffafaf)
    (218 . #xffafd7)
    (219 . #xffafff)
    (220 . #xffd700)
    (221 . #xffd75f)
    (222 . #xffd787)
    (223 . #xffd7af)
    (224 . #xffd7d7)
    (225 . #xffd7ff)
    (226 . #xffff00)
    (227 . #xffff5f)
    (228 . #xffff87)
    (229 . #xffffaf)
    (230 . #xffffd7)
    (231 . #xffffff)
    (232 . #x080808)
    (233 . #x121212)
    (234 . #x1c1c1c)
    (235 . #x262626)
    (236 . #x303030)
    (237 . #x3a3a3a)
    (238 . #x444444)
    (239 . #x4e4e4e)
    (240 . #x585858)
    (241 . #x626262)
    (242 . #x6c6c6c)
    (243 . #x767676)
    (244 . #x808080)
    (245 . #x8a8a8a)
    (246 . #x949494)
    (247 . #x9e9e9e)
    (248 . #xa8a8a8)
    (249 . #xb2b2b2)
    (250 . #xbcbcbc)
    (251 . #xc6c6c6)
    (252 . #xd0d0d0)
    (253 . #xdadada)
    (254 . #xe4e4e4)
    (255 . #xeeeeee)))

;; Based on xterm, src/misc.c/allocateClosestRGB()
(defun color-diff (a b)
  (let ((dr (* 0.30 (- (ldb (byte 8 16) a) (ldb (byte 8 16) b))))
        (dg (* 0.61 (- (ldb (byte 8 8) a) (ldb (byte 8 8) b))))
        (db (* 0.11 (- (ldb (byte 8 0) a) (ldb (byte 8 0) b)))))
    (+ (expt dr 2) (expt dg 2) (expt db 2))))

(defun approximate-rgb (rgb)
  (loop :with best-diff = most-positive-fixnum
        :with best-color = 0
        :for i :from 0 :below 256
        :for (nil . xc) :in *xterm-256*
        :for diff = (color-diff rgb xc)
        :do (when (< diff best-diff)
              (setf best-color i
                    best-diff diff))
        :finally (return best-color)))

;;; palette modification - minimise damage by using 16-231 and hoping that orig_colors works

(defvar *current-index* 16)
(defvar *palette* (make-hash-table))

(defun next-free-color ()
  (let ((old *current-index*))
    (if (<= *current-index* 230) ; don't overwrite past 231 where the grayscale ramp starts
        (incf *current-index*)
        (setf *current-index* 16))
    old))

(defun reset-colors ()
  (ti:tputs ti:orig-colors)
  (setf *current-index* 16)
  (clrhash *palette*))

;; TODO please remove this once terminfo is updated
(in-package :terminfo)
(defun tparm (string &rest args)
  "Return the string representing the command and arguments."
  (when (null string) (return-from tparm ""))
  (with-output-to-string (out)
    (with-input-from-string (in string)
      (do ((stack '()) (flags 0) (width 0) (precision 0) (number 0)
           (dvars (make-array 26 :element-type '(unsigned-byte 8)
                                 :initial-element 0))
           (svars (load-time-value
                   (make-array 26 :element-type '(unsigned-byte 8)
                                  :initial-element 0)))
           (c (read-char in nil) (read-char in nil)))
          ((null c))
        (cond ((char= c #\%)
               (setq c (read-char in) flags 0 width 0 precision 0)
               (tagbody
                state0
                  (case c
                    (#\% (princ c out) (go terminal))
                    (#\: (setq c (read-char in)) (go state2))
                    (#\+ (go state1))
                    (#\- (go state1))
                    (#\# (go state2))
                    (#\Space (go state2))
                    ((#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9) (go state3))
                    (#\d (go state5))
                    (#\o (go state6))
                    ((#\X #\x) (go state7))
                    (#\s (go state8))
                    (#\c (princ (code-char (pop stack)) out) (go terminal))
                    (#\p (go state9))
                    (#\P (go state10))
                    (#\g (go state11))
                    (#\' (go state12))
                    (#\{ (go state13))
                    (#\l (push (length (pop stack)) stack) (go terminal))
                    (#\* (push (* (pop stack) (pop stack)) stack)
                     (go terminal))
                    (#\/ (push (let ((n (pop stack))) (/ (pop stack) n)) stack)
                     (go terminal))
                    (#\m (push (let ((n (pop stack))) (mod (pop stack) n))
                               stack)
                     (go terminal))
                    (#\& (push (logand (pop stack) (pop stack)) stack)
                     (go terminal))
                    (#\| (push (logior (pop stack) (pop stack)) stack)
                     (go terminal))
                    (#\^ (push (logxor (pop stack) (pop stack)) stack)
                     (go terminal))
                    (#\= (push (if (= (pop stack) (pop stack)) 1 0) stack)
                     (go terminal))
                    (#\> (push (if (<= (pop stack) (pop stack)) 1 0) stack)
                     (go terminal))
                    (#\< (push (if (>= (pop stack) (pop stack)) 1 0) stack)
                     (go terminal))
                    (#\A (push (if (or (zerop (pop stack))
                                       (zerop (pop stack)))
                                   0
                                   1)
                               stack)
                     (go terminal))
                    (#\O (push (if (and (zerop (pop stack))
                                        (zerop (pop stack)))
                                   0
                                   1)
                               stack)
                     (go terminal))
                    (#\! (push (if (zerop (pop stack)) 1 0) stack)
                     (go terminal))
                    (#\~ (push (logand #xFF (lognot (pop stack))) stack)
                     (go terminal))
                    (#\i (when args
                           (incf (first args))
                           (when (cdr args)
                             (incf (second args))))
                     (go terminal))
                    (#\? (go state14))
                    (#\t (go state15))
                    (#\e (go state16))
                    (#\; (go state17))
                    (otherwise (error "Unknown %-control character: ~C" c)))
                state1
                  (let ((next (peek-char nil in nil)))
                    (when (position next "0123456789# +-doXxs")
                      (go state2)))
                  (if (char= c #\+)
                      (push (+ (pop stack) (pop stack)) stack)
                      (push (let ((n (pop stack))) (- (pop stack) n)) stack))
                  (go terminal)
                state2
                  (case c
                    (#\# (setf flags (logior flags 1)))
                    (#\+ (setf flags (logior flags 2)))
                    (#\Space (setf flags (logior flags 4)))
                    (#\- (setf flags (logior flags 8)))
                    ((#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
                     (go state3))
                    (t (go blah)))
                  (setf c (read-char in))
                  (go state2)
                state3
                  (setf width (digit-char-p c))
                state3-loop
                  (setf c (read-char in))
                  (case c
                    ((#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
                     (setf width (+ (* width 10) (digit-char-p c)))
                     (go state3-loop))
                    (#\. (setf c (read-char in)) (go state4)))
                  (go blah)
                state4
                  (setf precision (digit-char-p c))
                state4-loop
                  (setf c (read-char in))
                  (case c
                    ((#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
                     (setf precision (+ (* precision 10) (digit-char-p c)))
                     (go state4-loop)))
                  (go blah)
                blah
                  (case c
                    (#\d (go state5))
                    (#\o (go state6))
                    ((#\X #\x) (go state7))
                    (#\s (go state8))
                    (otherwise (error "Unknown %-control character: ~C" c)))
                state5
                state6
                state7
                state8
                  (princ (xform (truncate (pop stack)) ; literally this one line was broken
                                c flags width precision) out)
                  (go terminal)
                state9
                  (let* ((i (digit-char-p (read-char in)))
                         (a (nth (1- i) args)))
                    (etypecase a
                      (character (push (char-code a) stack))
                      (integer (push a stack))
                      (string (push a stack))))
                  (go terminal)
                state10
                  (let ((var (read-char in)))
                    (cond ((char<= #\a var #\z)
                           (setf (aref dvars (- (char-code var)
                                                (char-code #\a)))
                                 (pop stack)))
                          ((char<= #\A var #\Z)
                           (setf (aref svars (- (char-code var)
                                                (char-code #\A)))
                                 (pop stack)))
                          (t (error "Illegal variable name: ~C" var))))
                  (go terminal)
                state11
                  (let ((var (read-char in)))
                    (cond ((char<= #\a var #\z)
                           (push (aref dvars (- (char-code var)
                                                (char-code #\a)))
                                 stack))
                          ((char<= #\A var #\Z)
                           (push (aref svars (- (char-code var)
                                                (char-code #\A)))
                                 stack))
                          (t (error "Illegal variable name: ~C" var))))
                  (go terminal)
                state12
                  (push (char-code (read-char in)) stack)
                  (unless (char= (read-char in) #\')
                    (error "Invalid character constant"))
                  (go terminal)
                state13
                  (setq number 0)
                state13-loop
                  (setq c (read-char in))
                  (let ((n (digit-char-p c)))
                    (cond (n (setq number (+ (* 10 number) n))
                             (go state13-loop))
                          ((char= c #\})
                           (push number stack)
                           (go terminal))))
                  (error "Invalid integer constant")
                state14
                  (go terminal)
                state15
                  (when (/= (pop stack) 0)
                    (go terminal))
                  (skip-forward in t)
                  (go terminal)
                state16
                  (skip-forward in nil)
                state17
                terminal
                  #| that's all, folks |#)) ; thank goodness
              (t (princ c out)))))))
